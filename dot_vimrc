set nocompatible              " be iMproved, be safe
" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless

" install vim-plug
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" ## BINDINGS ##
" fugitive.vim: a Git wrapper so awesome, it should be illegal
Plug 'tpope/vim-fugitive'

" ## INTERFACE ##
" Pseudo-command-line (experimental)
"Plug 'junegunn/vim-pseudocl'
" Go to Terminal or File manager (maybe not be so useful)
"Plug 'justinmk/vim-gtfo'
" Ranger integration in vim and neovim
Plug 'francoiscabrol/ranger.vim'


" ## FIXES ##
" Find-N-Replace in Vim with live preview (experimental)
"Plug 'junegunn/vim-fnr' " requires pseudocl
" Enhancing in-buffer search experience
Plug 'junegunn/vim-slash'
" enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'
" Heuristically set buffer options (auto indentation)
Plug 'tpope/vim-sleuth'
" even better % / navigate and highlight matching words / modern matchit and matchparen replacement
Plug 'andymass/vim-matchup'

" ## VISUAL ##
" one colorscheme pack to rule them all!
Plug 'make-github-pseudonymous-again/vim-colorschemes'
" Vim plugin that displays tags in a window, ordered by scope
" Lean & mean status/tabline for vim that's light as air.
"Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
" should be loaded before vim-airline but does not work :(
Plug 'vim-airline/vim-airline'
" A collection of themes for vim-airline
Plug 'vim-airline/vim-airline-themes'
" Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'airblade/vim-gitgutter'
"Plug 'mhinz/vim-signify' " possible alternative
" Preview colours in source code while editing
Plug 'ap/vim-css-color', { 'for': 'css' }
" causes all trailing whitespace characters (spaces and tabs) to be highlighted
Plug 'ntpeters/vim-better-whitespace'
" A Vim plugin for visually displaying indent levels in code: <leader>ig
Plug 'nathanaelkane/vim-indent-guides'
" A git commit browser (depends on tpope/vim-fugitive)
Plug 'junegunn/gv.vim'
" The ultimate undo history visualizer
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
" Peekaboo extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers.
Plug 'junegunn/vim-peekaboo'
" Rainbow parentheses!
Plug 'junegunn/rainbow_parentheses.vim'
" Distraction-free writing in Vim
Plug 'junegunn/goyo.vim'
" Hyperfocus-writing in Vim
Plug 'junegunn/limelight.vim'

" ## COMPLETION ##
" allows you to use <Tab> for all your insert completion needs
"Plug 'ervandew/supertab'
" Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
Plug 'Raimondi/delimitMate'

" ## LANGUAGE SUPPORT ##
" Provide easy code formatting in Vim by integrating existing code formatters.
Plug 'Chiel92/vim-autoformat'
" plug-in which provides support for expanding abbreviations similar to emmet (I do not write HTML)
"Plug 'mattn/emmet-vim'
" Generate JSDoc to your JavaScript code
Plug 'heavenshell/vim-jsdoc', { 'do': 'make install' }
" Go development plugin for Vim (I do not write Go)
"Plug 'fatih/vim-go'
" Enhanced javascript syntax file for Vim
"Plug 'jelera/vim-javascript-syntax'
" Vastly improved Javascript indentation and syntax support in Vim
Plug 'pangloss/vim-javascript'
" The most accurate syntax highlighting plugin for JavaScript and Flow.js
" (I do not like the different color for native functions and methods).
"Plug 'yuezk/vim-js'
" JSX and TSX syntax pretty highlighting for vim
Plug 'maxmellon/vim-jsx-pretty'
" :heart: JavaScript happiness style linter
"Plug 'xojs/vim-xo'
" A modern vim plugin for editing LaTeX files
Plug 'lervag/vimtex'
" A vim plugin for writing Latex quickly
Plug 'brennier/quicktex'
" A vim 7.4+ plugin to generate table of contents for Markdown files. (too slow)
"Plug 'mzlogin/vim-markdown-toc'
" Snippet library (A lot of things I won't use in there, better define my own snippets)
"Plug 'honza/vim-snippets'

" ## MOTIONS ##
" search and jump to a single character with <leader><leader>s<char>
Plug 'easymotion/vim-easymotion'

" ## SEARCH & REPLACE ##
" easily search for, substitute, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'

" ## SHORTCUTS ##
" pairs of handy bracket mappings
"   - {[,]}<space>: add newlines
"   - {[,]}e: exchange lines
"   - yos: toggle spellcheck
"   - {[,]}u: URL encode/decode
"   - ... https://github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt
Plug 'tpope/vim-unimpaired'
" use CTRL-A/CTRL-X to increment dates, times, and more
Plug 'tpope/vim-speeddating'
" quoting/parenthesizing made simple
"   - cs"': replace "..." by '...' (works with <html>: cs'<q>, cst")
"   - ds": replace "..." by ...
"   - ysiw]: replaces <cword> by [<cword>]
"   - ysiW[: replaces <cWord> by [ <cWord> ]
"   - yss_: replace line by _line_
"   - In visual mode `S_`
Plug 'tpope/vim-surround'
" intensely orgasmic commenting
"   - ,ci: toggle comment
"   - ,cs: stylized comment
"   - ,c$: comment from position until EOL
"   - ,cA: add comment at the end of a line
Plug 'preservim/nerdcommenter'
" A Vim alignment plugin (vipga=, gaip=)
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
" A vim plugin that simplifies the transition between multiline and single-line code (gS gJ)
Plug 'AndrewRadev/splitjoin.vim'

" ## FUZZY FINDER ## ( Used a lot!!! )
" A command-line fuzzy finder written in Go
Plug 'junegunn/fzf', { 'dir': '~/.opt/fzf', 'do': './install --all' }
" bundle of fzf-based commands and mappings
Plug 'junegunn/fzf.vim'
"Plug 'nhooyr/fasd.vim'

" ## PREVIEW ##
" markdown preview plugin for (neo)vim (:MarkdownPreview)
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

call plug#end()

" Use hidden buffers. Allows to change buffer without saving.
set hidden
" Give more space for displaying messages. (coc.nvim)
set cmdheight=2
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamedplus
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience. (coc.nvim)
set updatetime=300
" Add the g flag to search/replace by default
" From vim.wikia.com:
" > Using :set gdefault creates confusion because then %s/// is global,
" > whereas %s///g is not (that is, g reverses its meaning)
" > CONCLUSION: DO NOT SET IT AS DEFAULT
"set gdefault
"
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=","
" Centralize backups, swapfiles and undo history (// for full paths)
set backupdir=~/.vim/backups//
set directory=~/.vim/swaps//
if has("persistent_undo")
  set undodir=~/.vim/undo//
  set undofile
endif

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Modelines are a security threat
" See https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set modelines=0
set nomodeline
" Do not enable per-directory .vimrc files
" set exrc
" and disable unsafe commands in them (just in case)
set secure
" Enable line numbers
set number
" Do not highlight current line (SLOW)
" see https://github.com/xolox/vim-easytags/issues/88
set nocursorline
function! s:enable_autonumber()
  " See https://github.com/junegunn/goyo.vim/issues/191#issue-402382972
  " and https://jeffkreeftmeijer.com/vim-number
  augroup rn_autonumber
    au!
    if exists("&relativenumber")
      " Swap between relative in non relative number lines
      set relativenumber
      autocmd InsertEnter * :set norelativenumber
      autocmd InsertLeave * :set relativenumber
      " Do not use relative line numbers (SLOW)
      "set norelativenumber
      "au BufReadPost * set relativenumber
    endif
  augroup END
endfunction
function! s:disable_autonumber()
  au! rn_autonumber
endfunction
call s:enable_autonumber()
" Make tabs as wide as four spaces
set tabstop=4
set shiftwidth=4
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Automatically cut long lines
set tw=79
" Adds a guide for maximum length of lines
set colorcolumn=+1
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd
" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Source .vimrc
nn <silent> <leader>V :source $MYVIMRC<cr>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<cr>

" Enable file type detection
filetype on
augroup filetypes
  au!
  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setlocal filetype=json syntax=javascript
  " Treat .md files as Markdown
  autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
  " Treat .sage files as .py
  autocmd BufNewFile,BufRead *.sage setlocal filetype=python syntax=python softtabstop=4 shiftwidth=4 expandtab
  "Note: for React to work as expected, you need your JSX filetype to be
  "javascript.jsx or javascriptreact and your TSX filetype to be typescript.jsx or
  "typescript.tsx or typescriptreact. In coc.nvim, these filetypes are mapped to
  "javascriptreact and typescriptreact because that's what tsserver uses. For
  "filetype like typescript.javascript, you need configure g:coc_filetype_map
  "variable in vimrc. (https://github.com/neoclide/coc-tsserver)
  autocmd BufNewFile,BufRead *.jsx setlocal filetype=javascript.jsx syntax=javascript
  autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx syntax=javascript
augroup END

" Set colors
set t_Co=256
syntax on
set background=dark
" Use Hybrid, to use ~/.Xresources uncomment next line
" let g:hybrid_use_Xresources = 1
silent! colorscheme hybrid
"silent! colorscheme seoul256

" Avoid vimdiff color clashes
" See https://stackoverflow.com/a/49061325/1582182
if &diff
  syntax off
endif

" Allow typos when saving and quitting.
command WQ wq
command Wq wq
command W w
command Q q

" This is BROKEN (https://github.com/vim/vim/issues/4738)
"let g:netrw_browsex_viewer = 'xdg-open'
"let g:netrw_http_cmd = 'xdg-open'
" What follows JUST WORKS
function! OpenURLUnderCursor()
  let s:uri = expand('<cWORD>')
  let s:uri = matchstr(s:uri, '[a-z]*:\/\/\([A-Za-z0-9._~:/?#@!$&*+,;=-]\|%[0-9a-fA-F]{2}\)*')
  let s:uri = substitute(s:uri, '?', '\\?', '')
  let s:uri = shellescape(s:uri, 1)
  if s:uri != ''
    silent exec "!wb --new-window ".s:uri
    :redraw!
  endif
endfunction
nnoremap gx :call OpenURLUnderCursor()<cr>

" Replace search with easymotion multi char search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" open a new buffer
noremap <silent> <leader>e :enew<cr>

" Strip trailing whitespace (w)
noremap <silent> <leader>w :StripWhitespace<cr>
augroup StripWhiteSpace
  au!
  autocmd FileType javascript,python,c,cpp,java,html,css,ruby autocmd BufWritePre <buffer> StripWhitespace
augroup END

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Recognize all .tex files as LaTeX
let g:tex_flavor = 'latex'

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Syntax highlighting
" Enable jsdoc highlighting in pangloss/vim-javascript
let g:javascript_plugin_jsdoc = 1

" Shortcut for formatting code
nn <silent> <leader>x :Autoformat<cr>
let g:formatters_javascript = ['xo_javascript', 'eslint_local']
let g:formatdef_xo_javascript = '"npx -- xo --fix --stdin"'

" clean up gvim interface
if has('gui_running')
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
  set lines=60 columns=108 linespace=0
  set guifont=LiterationMono\ Nerd\ Font\ Mono\ 12
endif

" goyo + limelight config
let g:goyo_width=90
let g:limelight_paragraph_span = 1
let g:limelight_priority = -1

function! s:goyo_enter()
  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
  endif
  " hi NonText ctermfg=101
  call s:disable_autonumber()
  set nowrap
  Limelight
  set scrolloff=999
endfunction

function! s:goyo_leave()
  set scrolloff=3
  Limelight!
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
  endif
  set wrap
  call s:enable_autonumber()
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

nnoremap <Leader>g :Goyo<cr>

" fzf mappings
nn <silent> <leader>f :Files<cr>
nn <silent> <leader>b :Buffers<cr>
nn <silent> <leader>o :History<cr>
nn <silent> <leader>q :Rg<cr>
let $FZF_DEFAULT_COMMAND= 'fd -t f -H -E ".git/*" -E "*.pdf"'

" https://github.com/junegunn/fzf.vim/issues/714#issuecomment-428802659
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ "rg --hidden -g '!.git/*' -g '!*.pdf' --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
      \ 1,
      \ {'options': '--delimiter : --nth 4..'},
      \ <bang>0)

" fasd mappings
command! -nargs=* Z :call Z(<f-args>)
function! Z(...) "Z - cd to recent / frequent directories
  let cmd = 'fasd -d -e printf'
  for arg in a:000
    let cmd = cmd . ' ' . arg
  endfor
  let path = system(cmd)
  if isdirectory(path)
    echo path
    exec 'cd' fnameescape(path)
  endif
endfunction

" undotree config
let g:undotree_WindowLayout = 2
nnoremap <silent> U :UndotreeToggle<cr>

" configure rainbow parentheses
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" search for last function def and call jsdoc
nmap <silent> <leader>j ?\(function \\|function\* \\|=>\\|class \)<cr>:noh<cr><Plug>(jsdoc)
nmap <silent> <leader>J <Plug>(jsdoc)

" noh shortcut
nn <silent> <leader>d :noh<cr>

" Places the current match at the center of the window ('junegunn/vim-slash')
if has('timers')
  " Blink 2 times with 50ms interval
  noremap <expr> <plug>(slash-after) 'zz'.slash#blink(2, 50)
else
  noremap <expr> <plug>(slash-after) zz
endif

" shorter window moves
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" buffer cycling/toggling/closing shortcuts
nn <silent> <leader>n :bn<cr>
nn <silent> <leader>p :bp<cr>
nn <silent> <leader>t :b#<cr>
nn <silent> <leader>l :bp<cr>:bd#<cr>

" Capitalize words and regions easily
" from http://vim.wikia.com/wiki/Capitalize_words_and_regions_easily
if (&tildeop)
  nmap gcw guw~l
  nmap gcW guW~l
  nmap gciw guiw~l
  nmap gciW guiW~l
  nmap gcis guis~l
  nmap gc$ gu$~l
  nmap gcgc guu~l
  nmap gcc guu~l
  vmap gc gu~l
else
  nmap gcw guw~h
  nmap gcW guW~h
  nmap gciw guiw~h
  nmap gciW guiW~h
  nmap gcis guis~h
  nmap gc$ gu$~h
  nmap gcgc guu~h
  nmap gcc guu~h
  vmap gc gu~h
endif

" Email completion using abook and fzf
function! s:iea_handler(lines)
  exec ':normal A' . join(a:lines,', ')
endfunction
command! InsertEmailAddresses call fzf#run({'source': 'notmuch-abook export -f email -s name', 'sink*': function('<sid>iea_handler'), 'options': '--bind "tab:toggle+clear-query" -m'})
nn <silent> <leader>v :InsertEmailAddress<cr>

" Emoji completion using abook and fzf
function! s:iemj_handler(lines)
  exec ':normal i' . join(a:lines,', ')
endfunction
command! InsertEmoji call fzf#run({'source': 'emojify --list | grep "^:"', 'sink*': function('<sid>iemj_handler')})
nn <silent> <leader>i :InsertEmoji<cr>

" vimtex + surround = magic
augroup latexSurround
  au!
  autocmd FileType tex,plaintex call s:latexSurround()
augroup END

" vimtex synctex
let g:vimtex_view_method = "mupdf"

function! s:latexSurround()
  let b:surround_{char2nr("e")} = "\\begin{\1environment: \1}\n\t\r\n\\end{\1\1}"
  let b:surround_{char2nr("c")} = "\\\1command: \1{\r}"
  " vim-surround: q for `foo' and Q for ``foo''
  let b:surround_{char2nr('q')} = "`\r'"
  let b:surround_{char2nr('Q')} = "``\r''"
  let b:surround_{char2nr('O')} = "O(\r)"
endfunction

let g:ranger_map_keys = 0
map <leader>R :RangerWorkingDirectory<cr>
map <leader>r :RangerCurrentFile<cr>

" jsx
let g:jsx_ext_required = 0

" ## SEARCH AND REPLACE ##
" search selected text
vmap // "hy/<C-r>=escape(@",'/\^$.*[~')<cr>
" whole file: replace selection with the standard search and replace tool
vnoremap <C-r> "hy:%s/<C-r>=escape(@",'/\^$.*[~')<cr>//Ig<left><left><left>
vnoremap <S-r> "hy:.s/<C-r>=escape(@",'/\^$.*[~')<cr>//Ig<left><left><left>
" whole file: replace selection using subvert (preserves case and also handles
" singular/plural with word{,s} syntax
vnoremap <C-s> "hy:%Subvert/<C-r>=escape(@",'/\^$.*[~')<cr>//g<left><left>
vnoremap <S-f> "hy:.Subvert/<C-r>=escape(@",'/\^$.*[~')<cr>//g<left><left>
" current line: add a newline after each occurrence of the last search term
nnoremap SS :s//&\r/g<cr>

" spelling
augroup spelling
  au!
  autocmd FileType tex,plaintex setlocal spell
  autocmd BufRead,BufNewFile *.tex setlocal spell
  autocmd BufRead,BufNewFile *.md setlocal spell
  autocmd BufRead,BufNewFile *.mmark setlocal spell
  autocmd FileType mail setlocal spell
  autocmd FileType gitcommit setlocal spell
augroup END

set spelllang=en_us
" set spellfile=~/.vim/spell/en.utf-8.add
let g:tex_comment_nospell= 1
" See also
" https://vi.stackexchange.com/questions/68/autocorrect-spelling-mistakes#15872
" https://vi.stackexchange.com/questions/68/autocorrect-spelling-mistakes#312
" https://www.reddit.com/r/vim/comments/4xgof3/improvements_to_awesome_correct_spelling_shortcut
" https://vi.stackexchange.com/questions/15051/how-can-i-use-multiple-spell-files-at-the-same-time

" Don't pass messages to |ins-completion-menu|. (coc.nvim)
set shortmess+=c
" Add spelling dictionary suggestions to native complete menu when available.
set complete+=kspell
" Open menu even if single option, autocomplete LCP, display additional info in
" popup rather than preview window.
set completeopt=menuone,longest,popup
